1A
#include <stdio.h>
int crosssubsum (int a[],int low,int mid,int high)
{
 int leftsum=0,rightsum=0,sum=0,i;
 for (i=mid;i>=low;i--)
 {
 sum = sum + a[i];
 if (sum > leftsum)
 leftsum = sum;
 }
 sum = 0;
 for (i=mid+1;i<=high;i++)
 {
 sum = sum + a[i];
 if (sum > rightsum)
 rightsum = sum;
 }
 return leftsum+rightsum;
}
int maxsubsum (int a[],int low,int high)
{
 int mid,leftsum,rightsum,crosssum;
 if (low == high)
 return a[low];
 mid = (low+high)/2;
 leftsum = maxsubsum( a,low,mid);
 rightsum = maxsubsum (a,mid+1,high);
 crosssum = crosssubsum (a,low,mid,high);
 if (leftsum >= rightsum && leftsum >=crosssum)
 return leftsum;
 else if (rightsum >= leftsum && rightsum >=crosssum)
 return rightsum;
 else
 return crosssum;
}
int main ()
{
 int n,a[10],i,low,high,maxsum;
 printf ("Enter the no. of Elements\n");
 scanf ("%d",&n);
 printf ("Enter an Array of +ve and -ve No.\n");
 for (i=0;i<n;i++)
 scanf ("%d",&a[i]);
 low = 0;
 high = n-1;
 maxsum = maxsubsum (a,low,high);
 printf ("Maximum Contiguous Sum = %d\n",maxsum);
 return 0;
}

1B
#include <stdio.h>
struct stock
{
 int left;
 int right;
 int sum;
};
struct stock crosssubsum (int *a,int low,int mid,int high)
{
 int leftsum=0,rightsum=0,sum=0,i,j,maxleft=0,maxright=0;
 struct stock res;
 for (i=mid;i>=low;i--)
 {
 sum = sum + a[i];
 if (sum > leftsum)
 {
 leftsum = sum;
 maxleft = i;
 }
 }
 sum = 0;
 for (j=mid+1;j<=high;j++)
 {
 sum = sum + a[j];
 if (sum > rightsum)
 {
 rightsum = sum;
 maxright = j;
 }
 }
 res.left = maxleft;
 res.right = maxright;
 res.sum = leftsum+rightsum;
 return res;
}
struct stock maxsubsum (int *a,int low,int high)
{
 int mid;
 struct stock leftsum,rightsum,crosssum,res;
 if (low == high)
 {
 res.left = low;
 res.right = high;
 res.sum = a[low];
 return res;
 }
 mid = (low+high)/2;
 leftsum = maxsubsum( a,low,mid);
 rightsum = maxsubsum (a,mid+1,high);
 crosssum = crosssubsum (a,low,mid,high);
 if (leftsum.sum >= rightsum.sum && leftsum.sum >=crosssum.sum)
 return leftsum;
 else if (rightsum.sum >= leftsum.sum && rightsum.sum >=crosssum.sum)
 return rightsum;
 else
 return crosssum;
}
int main ()
{
 int n,a[10],i,low,high;
 struct stock maxsum;
 printf ("Enter the no. of Days in Stock Market\n");
 scanf ("%d",&n);
 printf ("Enter the Gain or Loss in Stock Market per Day\n");
 for (i=0;i<n;i++)
 scanf ("%d",&a[i]);
 low =0; high = n-1;
 maxsum = maxsubsum (a,low,high);
 printf ("Maximum Profit in Stock Market lies from Day %d to Day
%d\n",maxsum.left+1,maxsum.right+1);
 printf ("Maximum Profit in Stock Market = %d\n",maxsum.sum);
 return 0;
}

2A
#include <stdio.h>
void BFS (int a[10][10],int n,int src,int s[10])
{
 int f=0,r=-1,q[20],i,v;
 printf ("Source Node: %d\n",src);
 s[src] = 1;
 q[++r] = src;
 printf("Visited Nodes using BFS:\n");
 while (f <= r)
 {
 v = q[f++];
 for (i=1;i<=n;i++)
 if (s[i]==0 && a[v][i])
 {
 q[++r] = i;
 printf ("%d\t",i);
 s[i] = 1;
 }
 }
}
int main ()
{
 int a[10][10],n,i,j,s[20],src;
 printf ("Enter no. of Nodes in Graph\n");
 scanf ("%d",&n);
 printf ("Enter the connections of Graph in Adjacency Matrix\n");
 for (i=1;i<=n;i++)
 for (j=1;j<=n;j++)
 scanf ("%d",&a[i][j]);
 printf ("Enter the Source Node\n");
 scanf ("%d",&src);
 for(i=1;i<=n;i++)
 s[i]=0;
 BFS (a,n,src,s);
 printf ("\n");
 return 0;
}
#include <stdio.h>
void DFS (int a[10][10],int n,int src,int s[10])
{
 int i;
 s[src] = 1;
 printf ("%d\t",src);
 for (i=1;i<=n;i++)
 if (s[i]==0 && a[src][i])
 DFS (a,n,i,s);
}
int main ()
{
 int a[10][10],n,i,j,s[20],src;
 printf ("Enter no. of Nodes in Graph\n");
 scanf ("%d",&n);
 printf ("Enter the connections of Graph in Adjacency Matrix\n");
 for (i=1;i<=n;i++)
 for (j=1;j<=n;j++)
 scanf ("%d",&a[i][j]);
 printf ("Enter the Source Node\n");
 scanf ("%d",&src);
 printf ("Source Node = %d\n",src);
 for (i=1;i<=n;i++)
 s[i]=0;
 printf("Visited Nodes using DFS:\n");
 DFS (a,n,src,s);
 printf ("\n");
 return 0;
}

2B
#include <stdio.h>
void BFS (int a[10][10],int n,int src,int s[10])
{
 int f=0,r=-1,q[20],i,v;
 s[src] = 1;
 q[++r] = src;
 while (f <= r)
 {
 v = q[f++];
 for (i=1;i<=n;i++)
 if (s[i]==0 && a[v][i])
 {
 q[++r] = i;
 s[i] = 1;
 }
 }
}
int main ()
{
 int a[10][10],n,i,j,s[20],src,dest;
 printf ("Enter no. of Nodes in Graph\n");
 scanf ("%d",&n);
 printf ("Enter the connections of Graph in Adjacency Matrix\n");
 for (i=1;i<=n;i++)
 for (j=1;j<=n;j++)
 scanf ("%d",&a[i][j]);
 printf ("Enter the Source Node\n");
 scanf ("%d",&src);
 printf ("Enter the Destination Node\n");
 scanf ("%d",&dest);
 printf ("Source Node = %d\n",src);
 printf ("Destination Node = %d\n",dest);
 for(i=1;i<=n;i++)
 s[i]=0;
 BFS (a,n,src,s);
 if (s[src]==1 && s[dest]==1)
 printf ("Destination is Reachable from %d to %d\n",src,dest);
 else
 printf ("Destination not Reachable\n");
 return 0;
}

3A
#include <stdio.h>
#include <string.h>
#define MAX 126
int t[MAX];
int max (int a, int b)
{
 return (a > b)? a: b;
}
void shifttable (char p[])
{
 int i,j,m;
 m = strlen(p);
 for (i=0;i<MAX;i++)
 t[i] = m;
 for (j=0;j<m-1;j++)
 t[p[j]] = m-1-j;
}
int boyermoore (char src[],char p[])
{
 int i,k,m,n;
 n = strlen(src);
 m = strlen(p);
 printf ("Length of Text = %d\n",n);
 printf ("Length of Pattern = %d\n",m);
 i = m-1;
 while (i<n)
 {
 k = 0;
 while ((k<m) && (p[m-1-k] == src[i-k]))
 k++;
 if (k == m)
 return (i-m+1);
 else
 i = i + max(t[src[i]]-k,1);
 }
 return -1;
}
int main ()
{
 char src[100],p[100];
 int pos;
 printf ("Enter the Text in which Pattern is to be Searched\n");
 gets (src);
 printf ("Enter the Pattern to be Searched\n");
 gets (p);
 shifttable (p);
 pos = boyermoore (src,p);
 if (pos >= 0)
 printf ("Pattern was found starting from position %d\n",pos+1);
 else
 printf ("Pattern was not found\n");
 return 0;
}

3B
#include <stdio.h>
#include <string.h>
#define MAX 126
int t[MAX];
int max (int a, int b)
{
 return (a > b)? a: b;
}
void shifttable (char p[])
{
 int i,j,m;
 m = strlen(p);
 for (i=0;i<MAX;i++)
 t[i] = m;
 for (j=0;j<m-1;j++)
 t[p[j]] = m-1-j;
}
int boyermoore (char src[],char p[])
{
 int i,k,m,n;
 n = strlen(src);
 m = strlen(p);
 i = m-1;
 while (i<n)
 {
 k = 0;
 while ((k<m) && (p[m-1-k] == src[i-k]))
 k++;
 if (k == m)
 return (i-m+1);
 else
 i = i + max(t[src[i]]-k,1);
 }
 return -1;
}
int main ()
{
 char src[100],p[100];
 int i,pos,count=0;
 char keywords [4][10] = {"free","money","help","price"};
 printf ("Enter Mail Message\n");
 gets (src);
 for (i=0;i<4;i++)
 {
 strcpy (p,keywords[i]);
 shifttable (p);
 pos = boyermoore (src,p);
 if (pos >= 0)
 count++;
 }
 if (count > 3)
 printf ("SPAM!\n");
 else
 printf ("NOT SPAM\n");
 return 0;
}

4A
#include <stdio.h>
#include <string.h>
int MAX (int a,int b)
{
 return (a>b)?a:b;
}
void LCS (char X[],char Y[],int m,int n)
{
 int i,j,L[m+1][n+1];
 for (i=0;i<=m;i++)
 {
 for (j=0;j<=n;j++)
 {
 if (i == 0 || j == 0)
 L[i][j] = 0;
 else if (X[i-1] == Y[j-1])
 L[i][j] = L[i-1][j-1] + 1;
 else
 L[i][j] = MAX(L[i-1][j], L[i][j-1]);
 }
 }
 printf ("The Length of Longest Common Subsequence is %d\n",L[m][n]);
 int index = L[m][n];
 char lcs[index+1];
 lcs[index] = '\0';
 i = m;
 j = n;
 while (i > 0 && j > 0)
 {
 if (X[i-1] == Y[j-1])
 {
 lcs[index-1] = X[i-1];
 i--;
 j--;
 index--;
 }
 else if (L[i-1][j] > L[i][j-1])
 i--;
 else
j--;
 }
 printf ("The Longest Common Subsequence of %s and %s is %s\n",X,Y,lcs);
}
int main ()
{
 char X[20],Y[20];
 int m,n;
 printf ("Enter 1st Sequence\n");
 gets (X);
 printf ("Enter 2nd Sequence\n");
 gets (Y);
 m = strlen (X);
 n = strlen (Y);
 LCS (X,Y,m,n);
 return 0;
}

4B
#include <stdio.h>
#include <string.h>
int MAX (int a,int b)
{
 return (a>b)?a:b;
}
void LCS (char X[],char Y[],int m,int n)
{
 int i,j,L[m+1][n+1];
 for (i=0;i<=m;i++)
 {
 for (j=0;j<=n;j++)
 {
 if (i == 0 || j == 0)
 L[i][j] = 0;
else if (X[i-1] == Y[j-1])
 L[i][j] = L[i-1][j-1] + 1;
 else
 L[i][j] = MAX(L[i-1][j], L[i][j-1]);
 }
 }
 printf ("The Length of Longest Common DNA Subsequence is %d\n",L[m][n]);
 int index = L[m][n];
 char lcs[index+1];
 lcs[index] = '\0';
 i = m;
 j = n;
 while (i > 0 && j > 0)
 {
 if (X[i-1] == Y[j-1])
 {
 lcs[index-1] = X[i-1];
 i--;
 j--;
 index--;
 }
 else if (L[i-1][j] > L[i][j-1])
 i--;
 else
 j--;
 }
 printf ("The Longest Common DNA Subsequence of %s and %s is %s\n",X,Y,lcs);
}
int main ()
{
 char X[20],Y[20];
 int m,n;
 //DNA Sequence contain string of A,C,G and T characters only
 printf ("Enter 1st DNA Sequence\n");
 gets (X);
 printf ("Enter 2nd DNA Sequence\n");
 gets (Y);
 m = strlen (X);
 n = strlen (Y);
 LCS (X,Y,m,n);
 return 0;
}

5A
#include <stdio.h>
void kruskal (int cost[20][20],int n)
{
 int parent[20]={0},min,mincost=0,ne=1;
 int a,b,i,j,u,v;
 while (ne < n)
 {
 for (i=1,min=999;i<=n;i++)
 for (j=1;j<=n;j++)
 if (cost[i][j] < min)
 {
 min = cost[i][j];
 a = u = i;
 b = v = j;
 }
 while (parent[u])
 u = parent[u];
 while (parent[v])
 v = parent[v];
 if (u != v)
 {
 printf ("%d edge (%d,%d) = %d\n",ne++,a,b,min);
 mincost = mincost + min;
 parent[v] = u;
 }
 cost[a][b] = cost[b][a] = 999;
 }
 printf ("The Minimum Cost = %d\n",mincost);
}
int main()
{
 int n,i,j,cost[20][20];
 printf ("Enter the no. of Nodes\n");
 scanf ("%d",&n);
 printf ("Enter the Cost Adjacency Matrix\n");
 for (i=1;i<=n;i++)
 for (j=1;j<=n;j++)
 {
 scanf ("%d",&cost[i][j]);
if (cost[i][j] == 0)
 cost[i][j] = 999;
 }
 printf ("The edges of Minimum Cost Spanning Tree are\n");
 kruskal (cost,n);
 return 0;
}

5B
#include <stdio.h>
void kruskal (int cost[20][20],int n)
{
 int parent[20]={0},min,mincost=0,ne=1;
 int a,b,i,j,u,v;
 while (ne < n)
 {
 for (i=1,min=999;i<=n;i++)
 for (j=1;j<=n;j++)
 if (cost[i][j] < min)
 {
 min = cost[i][j];
 a = u = i;
 b = v = j;
 }
 while (parent[u])
 u = parent[u];
 while (parent[v])
 v = parent[v];
 if (u != v)
 {
 printf ("%d edge (%d,%d) = %d\n",ne++,a,b,min);
mincost = mincost + min;
 parent[v] = u;
 }
 cost[a][b] = cost[b][a] = 999;
 }
 printf ("The Minimum Wiring Cost = %d\n",mincost);
}
int main()
{
 int n,i,j,cost[20][20];
 printf ("Enter the no. of Nodes\n");
 scanf ("%d",&n);
 printf ("Enter the Cost Adjacency Matrix\n");
 for (i=1;i<=n;i++)
 for (j=1;j<=n;j++)
 {
 scanf ("%d",&cost[i][j]);
 if (cost[i][j] == 0)
 cost[i][j] = 999;
 }
 printf ("The edges of Minimum Cost Spanning Tree are\n");
 kruskal (cost,n);
 return 0;
}

6A
#include <stdio.h>
int BellmanFord (int G[20][20] ,int n,int E,int edge[20][2])
{
 int i,u,v,k,distance[20],parent[20],S,flag=1;
 for (i=0;i<n;i++)
 {
 distance[i] = 1000;
 parent[i] = -1;
 }
 printf ("Enter Source\n");
 scanf ("%d",&S);
 printf ("Shortest Path from Source %d:\n",S);
 distance[S-1] = 0;
 for (i=0;i<n-1;i++)
 {
 for (k=0;k<E;k++)
 {
 u = edge[k][0];
 v = edge[k][1];
 if (distance[u]+G[u][v] < distance[v])
 {
 distance[v] = distance[u] + G[u][v];
 parent[v] = u;
 }
 }
 }
 for(k=0;k<E;k++)
 {
 u = edge[k][0];
 v = edge[k][1];
 if (distance[u]+G[u][v] < distance[v])
 flag = 0;
 }
 if (flag)
 for (i=0;i<n;i++)
 printf ("Vertex %d -> Cost = %d Parent = %d\n",i+1,distance[i],parent[i]+1);
 return flag;
}
int main ()
{
 int n,edge[20][2],G[20][20],i,j,k=0;
 printf ("Enter no. of Nodes in Graph\n");
 scanf ("%d",&n);
 printf ("Enter Cost Adjacency Matrix of Graph\n");
 for (i=0;i<n;i++)
 for (j=0;j<n;j++)
 {
 scanf ("%d",&G[i][j]);
 if (G[i][j] != 0)
 {
 edge[k][0] = i;
 edge[k++][1] = j;
 }
 }
 if (BellmanFord(G,n,k,edge))
 printf ("No negative weight cycle\n");
 else
 printf ("Negative weight cycle exists\n");
 return 0;
}

6B
#include <stdio.h>
int BellmanFord (int G[20][20] ,int n,int E,int edge[20][2])
{
 int i,u,v,k,distance[20],parent[20],S,D,flag=1;
 for (i=0;i<n;i++)
 {
 distance[i] = 1000;
 parent[i] = -1;
 }
 printf ("Enter Source\n");
 scanf ("%d",&S);
 printf ("Enter Destination\n");
 scanf ("%d",&D);
 printf ("Shortest Path from Source %d to Destination %d:\n",S,D);
 distance[S-1] = 0;
 for (i=0;i<n-1;i++)
 {
 for (k=0;k<E;k++)
 {
 u = edge[k][0];
 v = edge[k][1];
 if (distance[u]+G[u][v] < distance[v])
 {
 distance[v] = distance[u] + G[u][v];
 parent[v] = u;
 }
 }
 }
 for(k=0;k<E;k++)
 {
 u = edge[k][0];
 v = edge[k][1];
 if (distance[u]+G[u][v] < distance[v])
 flag = 0;
 }
 if (flag)
 printf("Vertex %d -> Cost = %d Parent = %d\n",D,distance[D-1],parent[D-1]+1);
 return flag;
}
int main ()
{
 int n,edge[20][2],G[20][20],i,j,k=0;
 printf ("Enter no. of Nodes in Graph\n");
 scanf ("%d",&n);
 printf ("Enter Cost Adjacency Matrix of Graph\n");
 for (i=0;i<n;i++)
 for (j=0;j<n;j++)
 {
 scanf ("%d",&G[i][j]);
 if (G[i][j] != 0)
 {
 edge[k][0] = i;
 edge[k++][1] = j;
 }
 }
 if (BellmanFord(G,n,k,edge))
 printf ("No negative weight cycle\n");
 else
 printf ("Negative weight cycle exists\n");
 return 0;
}

7A
#include <stdio.h>
int a[100],x[100];
int d;
void sum_of_subset (int weightsofar,int k,int remwt)
{
 int i;
 x[k] = 1;
 if (weightsofar + a[k] == d)
 {
 printf ("Subset ===>> {");
 for (i=1;i<=k;i++)
 if (x[i] == 1)
 printf ("%d,",a[i]);
 printf ("}\n");
 }
 else if (weightsofar + a[k] + a[k+1] <= d)
 sum_of_subset (weightsofar+a[k],k+1,remwt-a[k]);
 if ((weightsofar+remwt-a[k] >= d) && (weightsofar+a[k+1] <= d))
 {
 x[k] = 0;
 sum_of_subset (weightsofar,k+1,remwt-a[k]);
 }
}
int main ()
{
 int n,i,sum=0;
 printf ("Enter no. of Elements\n");
 scanf ("%d",&n);
 printf ("Enter the Elements\n");
 for (i=1;i<=n;i++)
 {
 scanf ("%d",&a[i]);
 sum = sum + a[i];
 }
 printf ("Enter the Required Sum to be Computed\n");
 scanf ("%d",&d);
 if (sum < d)
 printf ("No Solution Exists\n");
 else
 {
 printf("The Solution is\n");
 sum_of_subset (0,1,sum);
 }
 return 0;
}

7B
#include <stdio.h>
struct faculty
{
 char name[20];
 int exp;
};
int x[100];
int d=9;
struct faculty a[7]={{"________",},{"Mr. John",1},{"Mr. Jacob",2},{"Mr. Dave",3},
 {"Mrs. Emily",6},{"Mrs. Ava",7},{"Ms. Jessica",8}};
void sum_of_subset (int weightsofar,int k,int remwt)
{
 int i=0;
 x[k] = 1;
 if (weightsofar + a[k].exp == d)
 {
 printf ("\nTeam of:\n{\n");
 for (i=0;i<k;i++)
 {
 if (x[i+1] == 1)
 printf ("\t%s -> %dyrs of Experience\n",a[i+1].name,a[i+1].exp);
 }
 printf ("}\n");
 }
 else if (weightsofar+a[k].exp+a[k+1].exp <= d)
 sum_of_subset (weightsofar+a[k].exp,k+1,remwt-a[k].exp);
 if ((weightsofar+remwt-a[k].exp >= d) && (weightsofar+a[k+1].exp <= d))
 {
 x[k] = 0;
 sum_of_subset (weightsofar,k+1,remwt-a[k].exp);
 }
}
int main ()
{
 int i,sum=0;
 printf ("Sl.No.\t\tFaculty\t\t\tTeaching Experience\n");
 for (i=1;i<=6;i++)
 {
 printf ("%d\t\t\t%s\t\t%dyrs\n",i,a[i].name,a[i].exp);
 sum = sum + a[i].exp;
 }
 printf ("\nRequired Years of Experience: %dyrs\n",d);
 printf ("\nTeams with %d Years of Experience:\n",d);
 if (sum < d)
 printf ("No Team Exists\n");
 else
 sum_of_subset (0,1,sum);
return 0;
}
